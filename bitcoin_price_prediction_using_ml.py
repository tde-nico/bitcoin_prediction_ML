# -*- coding: utf-8 -*-
"""Bitcoin_Price_Prediction_Using_ML

Automatically generated by Colaboratory.
"""

# Description: This program predicts the price of Bitcoin for the next 30 days

#Import the libraries
!pip install -U pandas
!pip install -U pandas_datareader

import pandas as pd
import numpy as np
import datetime as dt
import pandas_datareader as web

#Load the data
crypto_currency = 'BTC'
against_currency = 'USD'

start = dt.datetime(2016, 1, 1)
end = dt.datetime.now()

data = web.DataReader(
    f'{crypto_currency}-{against_currency}',
    'yahoo',
    start,
    end
)

#Show the first 7 lines of data
data.head(7)

# Remove extra columns
df = pd.DataFrame()
df['Price'] = data['Close'].values

#Show the first 7 lines of data
df.head(7)

# A variable for predicting 'n' days out into future
prediction_days = 30 # n = prediction_days = 30

#Create another column shifted 'n' units up
df['Prediction'] = df[['Price']].shift(-prediction_days)

#Show the first 7 rows of the new data
df.head(7)

#Show the last 7 rows
df.tail(7)

#Create the indipendent dataset
X = np.array(df.drop(['Prediction'], 1))
X = X[:len(df)-prediction_days]
print(X)

#Create the dependent dataset
Y = np.array(df['Prediction'])
Y = Y[:-prediction_days]
print(Y)

#Split the data into 80% training and 20% testing
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, shuffle=False)

# Set the prediction_days_array equal to the last 30 rows from the original dataset
prediction_days_array = np.array(df.drop(['Prediction'], 1))[-prediction_days:]
print(prediction_days_array)

from sklearn.svm import SVR

#Create and train the Support Vector Machine (Regressio) using radial basis function
svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.00001)
svr_rbf.fit(x_train, y_train)

#Test the model
svr_rbf_confidence = svr_rbf.score(x_test, y_test)
print("svr_rbf accuracy: ", svr_rbf_confidence)

#Print the predicted values
svm_prediction = svr_rbf.predict(x_test)
print(svm_prediction)
print()
print(y_test)

# Print the model predictions for the next 'n=30' days
svm_prediction = svr_rbf.predict(prediction_days_array)
print(svm_prediction)
print()
print(df.tail(prediction_days))
